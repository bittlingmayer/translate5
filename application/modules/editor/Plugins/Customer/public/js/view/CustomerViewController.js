/*
 * File: app/view/customer/PanelViewController.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Editor.plugins.Customer.view.CustomerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.customerPanel',
    
    /**
     * Set record for editing
     */
    dblclick: function(dataview, record, item, index, e, eOpts) {
        var formPanel = this.getReferences().form,
            removeButton = this.getReferences().removeButton,
            vm = this.getViewModel();

        vm.set('record', record);
        vm.set('title', this.getView().strings.editCustomerTitle);

        formPanel.loadRecord(record);
        removeButton.setDisabled(false);
    },

    /**
     * Save record
     */
    save: function(button, e, eOpts) {
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            record = form.getRecord(),
            store = me.getStore('customers'),
            saving = me.getView().strings.saveCustomerMsg;

        // Valid
        if (!form.isValid()) {
            return;
        }

        // Update associated record with values
        form.updateRecord();

        me.getView().mask(saving);

        record.save({
            success: function() {
                Editor.MessageBox.addSuccess(me.getView().strings.customerSavedMsg);
                store.load();
                me.getView().unmask();
                me.cancelEdit();
            },
            failure: function(response){
                Editor.app.getController('ServerException').handleException(response);
                me.getView().unmask();
            }
        });
    },

    /***
     * Reset the form on escape key press
     */
    onCustomerPanelRender:function(cmp){
        var me=this,
            map = new Ext.util.KeyMap({
                target: cmp.getEl(),
                key: Ext.event.Event.ESC,
                fn: function(){
                    me.cancelEdit();
                }
            });
    },
    
    /**
     * Reset the customer form
     */
    cancelEdit: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            vm = this.getViewModel();

        // Clear form
        form.reset();
        vm.set('record', false);
    },

    /***
     * Load empty record in customer form
     */
    add: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            removeButton = this.getReferences().removeButton,
            form = formPanel.getForm(),
            newRecord = Ext.create('Editor.plugins.Customer.model.Customer'),
            vm = this.getViewModel();

        // Clear form
        form.reset();

        // Set record
        form.loadRecord(newRecord);
        vm.set('record', newRecord);

        // Set title
        vm.set('title',this.getView().strings.addCustomerTitle);

        removeButton.setDisabled(true);
    },

    /**
     * Refresh the customers store
     */
    refresh: function(button, e, eOpts) {
        this.getReferences().list.getSelectionModel().deselectAll();
        this.getStore('customers').load();
    },

    /**
     * Show confirmation message for remove customer
     */
    remove:function(){
        var me=this;

        Ext.create('Ext.window.MessageBox').show({
            title: me.getView().strings.customerDeleteTitle,
            msg: me.getView().strings.customerDeleteMsg,
            buttons: Ext.Msg.YESNO,
            fn:me.handleDeleteCustomerWindowButton,
            scope:me,
            defaultFocus:'no',
            icon: Ext.MessageBox.QUESTION
        });

    },

    /***
     * Remove the loaded customer
     */
    removeCustomer:function(){
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            record = form.getRecord(),
            store = me.getStore('customers'),
            deleting = me.getView().strings.customerDeleteTitle;

        // Update associated record with values
        form.updateRecord();

        me.getView().mask(deleting);

        //remnove the record from the store
        store.remove(record);

        //sync the store with the proxy
        store.sync({
            success:function(){
                Editor.MessageBox.addSuccess(me.getView().strings.customerDeletedMsg);
                me.getView().unmask();
                me.cancelEdit();
            },
            failure: function(response){
                Editor.app.getController('ServerException').handleException(response);
                me.getView().unmask();
            }
        });
    },

    /***
     * Handler for the delete customer dialog window.
     * 
     */
    handleDeleteCustomerWindowButton:function(button){
        if(button=="yes"){
            this.removeCustomer();
            return true;
        }
        return false
    },

    //when customers panel is displayed,this function is executed
    reloadCustomerStore:function(){
        this.getStore('customers').load();
    }
});
